// Used by models/ResearchRequest.ts, controllers/researchController.ts, and jobs/researchJob.ts to represent persisted requests and guard status transitions.
export interface ResearchRequest {
  id: string;
  topic: string;
  userId: string;
  status: "pending" | "processing" | "completed" | "failed";
  createdAt: Date;
  updatedAt: Date;
}

// Used by models/ResearchResult.ts, controllers/researchController.ts, and jobs/researchJob.ts to return stored AI output tied to a request.
export interface ResearchResult {
  id: string;
  requestId: string;
  articles: Article[];
  keywords: string[];
  enhancedData?: EnhancedResearchData;
  createdAt: Date;
}

// Used by services/newsService.ts, services/aiService.ts, and models/ResearchResult.ts to normalize article payloads across providers.
export interface Article {
  title: string;
  summary: string;
  url: string;
  source: string;
  relevanceScore?: number;
  keyInsights?: string[];
  credibilityScore?: number;
}

// Used by models/WorkflowLog.ts, controllers/researchController.ts, and jobs/researchJob.ts to audit workflow progress for each request.
export interface WorkflowLog {
  id: string;
  requestId: string;
  step: string;
  status: "started" | "completed" | "failed";
  message: string;
  timestamp: Date;
}

// Used within ResearchSummary generated by services/aiService.ts to expose the most relevant underlying sources.
export interface ResearchSummarySource {
  title: string;
  relevance: string;
  credibility: string;
}

// Used by services/aiService.ts when returning enhanced summaries so the UI and persistence layers share a schema.
export interface ResearchSummary {
  executiveSummary: string;
  keyFindings: string[];
  recommendations: string[];
  confidenceLevel: number;
  sources: ResearchSummarySource[];
}

// Used by services/aiService.ts to constrain ResearchPlan depth values and keep depth options consistent across the stack.
export type ResearchDepth = "basic" | "intermediate" | "comprehensive";

// Used by services/aiService.ts for generated research plans and EnhancedResearchData, ensuring prompt planning stays typed.
export interface ResearchPlan {
  primaryQuestions: string[];
  searchTerms: string[];
  expectedFindings: string[];
  researchDepth: ResearchDepth;
}

// Used by services/aiService.ts when validating per-article analysis to capture AI-evaluated metrics per source.
export interface ArticleAnalysis {
  relevanceScore: number;
  mainTopics: string[];
  summary: string;
  keyInsights: string[];
  credibilityScore: number;
}

// Used by services/aiService.ts and models/ResearchResult.ts for enhanced payloads that combine articles, summary, plan, and metadata.
export interface EnhancedResearchData {
  articles: Article[];
  keywords: string[];
  researchSummary: ResearchSummary;
  researchPlan: ResearchPlan;
  metadata: {
    provider: string;
    totalAnalyzed: number;
    processingTimestamp: string;
  };
}

// Used by services/newsService.ts when calling the NewsAPI endpoint to safely parse NewsAPI responses.
export interface NewsAPIResponse {
  status: string;
  totalResults: number;
  articles: NewsAPIArticle[];
}

// Used within NewsAPIResponse for NewsAPI article records so the system knows the fields available from NewsAPI.
export interface NewsAPIArticle {
  source: {
    id: string | null;
    name: string;
  };
  author: string | null;
  title: string;
  description: string | null;
  url: string;
  urlToImage: string | null;
  publishedAt: string;
  content: string | null;
}

// Used in HackerNewsSearchResponse to describe Algolia hits returned from the Hacker News search API.
export interface HackerNewsHit {
  title: string;
  author: string;
  points: number | null;
  num_comments: number;
  url: string | null;
  created_at: string;
  story_id: number;
  objectID: string;
  story_text?: string | null;
  children?: number[];
}

// Used by services/newsService.ts when parsing Hacker News search results and paginated metadata.
export interface HackerNewsSearchResponse {
  hits: HackerNewsHit[];
  nbHits: number;
  hitsPerPage: number;
  nbPages: number;
  processingTimeMS: number;
}

// Used in WikipediaSearchResponse for individual result entries retrieved from the REST search API.
export interface WikipediaSearchPage {
  id: number;
  key: string;
  title: string;
  excerpt: string;
  matched_title: string | null;
  anchor: string | null;
  description: string;
  thumbnail: {
    mimetype: string;
    size: number | null;
    width: number;
    height: number;
    duration: number | null;
    url: string;
  } | null;
}

// Used by services/newsService.ts for Wikipedia search responses prior to fetching individual summaries.
export interface WikipediaSearchResponse {
  pages: WikipediaSearchPage[];
}

// Used by services/newsService.ts when fetching Wikipedia page summaries to capture the rich metadata returned by the summary endpoint.
export interface WikipediaSummaryResponse {
  type: string;
  title: string;
  displaytitle: string;
  namespace: {
    id: number;
    text: string;
  };
  wikibase_item: string;
  titles: {
    canonical: string;
    normalized: string;
    display: string;
  };
  pageid: number;
  thumbnail?: {
    source: string;
    width: number;
    height: number;
  };
  originalimage?: {
    source: string;
    width: number;
    height: number;
  };
  lang: string;
  dir: string;
  revision: string;
  tid: string;
  timestamp: string;
  description: string;
  description_source: string;
  content_urls: {
    desktop: {
      page: string;
      revisions: string;
      edit: string;
      talk: string;
    };
    mobile: {
      page: string;
      revisions: string;
      edit: string;
      talk: string;
    };
  };
  extract: string;
  extract_html: string;
}
